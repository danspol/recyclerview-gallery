package com.gallery;import android.content.Context;import android.graphics.Rect;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.AttributeSet;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.Random;import utils.com.gallery.R;/** * Created by admin on 12/24/2014. */public class FunnyGallery extends  RecyclerView {    FunnyGalleryAdapter adapter;    FunnyGalleryLinearLayoutManager mLinearManager;    FunnyScrollListener scrollListeners;    JSONArray data;    private boolean selected = true;    private View active;    public FunnyGallery(Context context) {        super(context);    }    public FunnyGallery(Context context, AttributeSet attrs) {        super(context, attrs);    }    public FunnyGallery(Context context, AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle);    }    public void constructor(JSONArray data){        this.data = data;        mLinearManager = new FunnyGalleryLinearLayoutManager(getContext());        mLinearManager.setOrientation(HORIZONTAL);        scrollListeners = new FunnyScrollListener();        setOnScrollListener(scrollListeners);        setLayoutManager(mLinearManager);        adapter = new FunnyGalleryAdapter();        setAdapter(adapter);        mLinearManager.scrollToPosition(adapter.getItemCount() / 2);    }    public void changeData(JSONArray data){        this.data = data;        adapter = new FunnyGalleryAdapter();        swapAdapter(adapter, false);        mLinearManager.scrollToPosition(adapter.getItemCount() / 2);        Random rand = new Random();        smoothScrollBy(rand.nextInt(2)+1,0);//        random();//        scrollListeners.positionCenter(scrollListeners.getApromativeCenterView());    }    public void random(){        Random rand = new Random();        smoothScrollBy(rand.nextInt(2000) - rand.nextInt(2000), 0);    }    public class FunnyGalleryAdapter extends RecyclerView.Adapter<FunnyGallery.ViewHolder> {        public class ViewHolder extends RecyclerView.ViewHolder {            // each data item is just a string in this case            public View mView;            public ViewHolder(View v) {                super(v);                Log.i("function","ViewHolder");                mView = v;            }        }        @Override        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {            Log.i("function","onCreateViewHolder i="+i);            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.gallery_item_view, viewGroup, false);            // set the view's size, margins, paddings and layout parameters            ViewHolder vh = new ViewHolder(v);            return vh;        }        @Override        public void onBindViewHolder(FunnyGallery.ViewHolder viewHolder, int i) {            Log.i("function","onBindViewHolder i="+i);            final ViewHolder vHolder = (ViewHolder) viewHolder;            try {                JSONObject obj = data.getJSONObject(i%data.length());                vHolder.mView.setTag(obj);                Button btn = (Button) vHolder.mView.findViewById(R.id.btn);                btn.setText(obj.getString("name"));                btn.setOnTouchListener(new OnTouchListener() {                    @Override                    public boolean onTouch(View v, MotionEvent event) {                        if(event.getAction()==1){                            if(v.getParent().equals(active)){                                selected = !selected;                            }                            scrollListeners.positionCenter(vHolder.mView);                            return true;                        }                        return false;                    }                });            } catch (JSONException e) {                e.printStackTrace();            }        }        @Override        public int getItemCount() {            Log.i("function","getItemCount");            return Integer.MAX_VALUE;        }    }    public class FunnyGalleryLinearLayoutManager extends LinearLayoutManager {        public FunnyGalleryLinearLayoutManager(Context context) {            super(context);        }        public FunnyGalleryLinearLayoutManager(Context context, int orientation, boolean reverseLayout) {            super(context, orientation, reverseLayout);        }    }    public class FunnyScrollListener extends RecyclerView.OnScrollListener {        private boolean moveTo = false;        @Override        public void onScrolled(RecyclerView recyclerView, int dx, int dy) {            super.onScrolled(recyclerView, dx, dy);            Log.i("info2","onScrolled dx="+dx+" dy="+dy+" scrollend="+isScrollContainer());        }        @Override        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {            super.onScrollStateChanged(recyclerView, newState);            if(newState<2 && isScrollContainer()){                if(!moveTo) {                    positionCenter(getApromativeCenterView());                    moveTo = false;                }            }            Log.i("info2","onScrollStateChanged newState="+newState+" moveTo="+moveTo);        }        public void positionCenter(View view){            if(view!=null){                if(active!=null){                    Button oldbtn = (Button)  active.findViewById(R.id.btn);                    oldbtn.setBackgroundResource(R.drawable.gallery_item);                }                active = view;                if (selected){                    Button btn = (Button) active.findViewById(R.id.btn);                    btn.setBackgroundResource(R.drawable.gallery_item_active);                }                smoothScrollBy(view.getLeft()-getWidth()/2+view.getWidth()/2,0);            }        }        public View getApromativeCenterView(){            int marginLeft = mLinearManager.findFirstVisibleItemPosition();            int marginRight= mLinearManager.findLastVisibleItemPosition();            for(int i = marginLeft;i <= marginRight;i++){                View view = mLinearManager.findViewByPosition(i);                if(view!=null && getWidth()/2>=view.getLeft() && getWidth()/2<=view.getRight()){                    return view;                }            }            return null;        }    }}